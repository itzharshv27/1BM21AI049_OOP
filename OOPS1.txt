#1a
class Students:
    pass

class Marks:
    pass

# Creating instances of the classes
student_instance = Students()
marks_instance = Marks()

# Checking if instances are of the specified classes
is_student_instance = isinstance(student_instance, Students)
is_marks_instance = isinstance(marks_instance, Marks)

# Checking if classes are subclasses of the built-in object class
is_students_subclass = issubclass(Students, object)
is_marks_subclass = issubclass(Marks, object)

# Printing the results
print(f"Is student_instance an instance of Students? {is_student_instance}")
print(f"Is marks_instance an instance of Marks? {is_marks_instance}")

print(f"Is Students a subclass of object? {is_students_subclass}")
print(f"Is Marks a subclass of object? {is_marks_subclass}")

#1b
class Complex:
    def __init__(self, real, imag):
        self.real = real
        self.imag = imag

    def __add__(self, other):
        # Overloading the + operator to perform addition of complex numbers
        return Complex(self.real + other.real, self.imag + other.imag)

    def __str__(self):
        # String representation of the complex number
        return f"{self.real} + {self.imag}j"

# Creating instances of the Complex class
c1 = Complex(3, 5)
c2 = Complex(1, 2)

# Adding c1 and c2 to get c3
c3 = c1 + c2

# Displaying the results
print(f"c1: {c1}")
print(f"c2: {c2}")
print(f"c3 (c1 + c2): {c3}")


#2a

class Song:
    def __init__(self, lyrics):
        self.lyrics = lyrics

    def sing_me_a_song(self):
        for line in self.lyrics:
            print(line)

# Define the lyrics for the "Happy Birthday" song
happy_bday_lyrics = [
    "May God bless you,",
    "Have a sunshine on you,",
    "Happy birthday to you"
]

# Create an instance of the Song class with the "Happy Birthday" lyrics
happy_bday = Song(happy_bday_lyrics)

# Call the sing_me_a_song method on the happy_bday instance
happy_bday.sing_me_a_song()

#2b

class Dog:
    def __init__(self, name, size, breed='Unknown', dob='Unknown'):
        self.name = self.set_name(name)
        self.size = size
        self.breed = breed
        self.dob = dob

    def bark(self):
        print("Woof!")

    def get_name(self):
        return self.name

    def set_name(self, new_name):
        if 2 <= len(new_name) <= 30 and new_name.isalpha():
            return new_name.title()
        else:
            print("Invalid name. Set a name between 2 and 30 alphabetical characters.")
            return "Unknown"

    def dog_years(self):
        # Assuming 1 year is equivalent to 7 dog years
        return 7 * (2024 - int(self.dob[-4:]))

# Example usage:
dog1 = Dog("Buddy", "Medium", "Labrador", "01/01/2010")
dog2 = Dog("Max", "Small")

# Accessing attributes
print(f"Dog 1's name: {dog1.get_name()}")
print(f"Dog 1's size: {dog1.size}")
print(f"Dog 1's breed: {dog1.breed}")
print(f"Dog 1's date of birth: {dog1.dob}")

# Performing methods
dog1.bark()
print(f"Dog 1's age in dog years: {dog1.dog_years()}")

# Trying to set an invalid name
dog1.set_name("Invalid123")

# Setting a valid name
dog1.set_name("Rover")

# Checking the updated name
print(f"Dog 1's updated name: {dog1.get_name()}")


#3a

class Employee:
    def __init__(self, name, salary):
        self.name = name
        self.__salary = salary  # Using double underscore to make it private

    def work(self):
        print(f"{self.name} is working.")

    def show(self):
        print(f"Employee Name: {self.name}")
        print(f"Salary: ${self.__salary}")

# Example usage:
employee1 = Employee("John Doe", 50000)

# Accessing public attributes and methods
employee1.work()

# Accessing private attribute indirectly using a public method
employee1.show()


#3b

class CreditCard:
    def __init__(self, limit):
        self.__limit = limit
        self.__balance = 0

    def get_balance(self):
        return self.__balance

    def withdraw(self, amount):
        if amount <= 0:
            print("Invalid withdrawal amount.")
            return
        if amount > self.__balance:
            print("Insufficient funds for withdrawal.")
            return

        self.__balance -= amount
        print(f"Withdrawal successful. Remaining balance: ${self.__balance}")

    def deposit(self, amount):
        if amount <= 0:
            print("Invalid deposit amount.")
            return

        self.__balance += amount
        print(f"Deposit successful. New balance: ${self.__balance}")

# Example usage:
credit_card = CreditCard(limit=1000)

# Accessing the balance using get_balance method
current_balance = credit_card.get_balance()
print(f"Current Balance: ${current_balance}")

# Attempting to directly modify the balance (will not work)
# credit_card.__balance = 500   # This line will cause an AttributeError

# Depositing and withdrawing
credit_card.deposit(200)
credit_card.withdraw(50)

# Trying an invalid withdrawal
credit_card.withdraw(1000)

4b

# Parent class 1
class Person:
    def __init__(self, name):
        self.name = name

# Parent class 2
class Company:
    def __init__(self, company_name):
        self.company_name = company_name

# Child class inheriting from both Person and Company
class Employee(Person, Company):
    def __init__(self, name, company_name, employee_id):
        # Call constructors of both parent classes
        Person.__init__(self, name)
        Company.__init__(self, company_name)
        self.employee_id = employee_id

# Create an Employee object and access attributes from both parent classes
employee_instance = Employee(name="John Doe", company_name="ABC Corp", employee_id="E12345")
print("Name:", employee_instance.name)
print("Company:", employee_instance.company_name)
print("Employee ID:", employee_instance.employee_id)


4afrom abc import ABC, abstractmethod

# Define abstract base class
class Car(ABC):
    @abstractmethod
    def milcagc0(self):
        pass

# Subclass 1
class Sedan(Car):
    def milcagc0(self):
        return "Sedan implementation of milcagc0"

# Subclass 2
class SUV(Car):
    def milcagc0(self):
        return "SUV implementation of milcagc0"

# Subclass 3
class Truck(Car):
    def milcagc0(self):
        return "Truck implementation of milcagc0"

sedan_instance = Sedan()
suv_instance = SUV()
truck_instance = Truck()

print(sedan_instance.milcagc0())  # Output: Sedan implementation of milcagc0
print(suv_instance.milcagc0())    # Output: SUV implementation of milcagc0
print(truck_instance.milcagc0())  # Output: Truck implementation of milcagc0

